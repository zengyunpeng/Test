                   OkHttp源码解析
关键类：
OkHttpClient, OkHttpClient.Builder
Dispatcher
Request, Request.Builder
Response
Call 
ConnectionPool

----------------------------------------------

基本使用：
创建OkHttpClient
创建Request
创建Call对象
执行网络请求获取Response，call.excute()或者call.enqueue(),Call是个接口，具体实现在realCall

---------------------------------------------
OkHttpClientBuilder源码
  构造方法：
	创建Dispatcher，
	创建ConnectionPool ，当请求的url相同时候就可以复用，（可以保持长链接）

Request.Builder源码
	指定请求方式，请求头信息，请求链接，请求体等请求信息

Call RealCall源码：
	realCall构造方法：
	保存client和request信息还有是否是webSocket并创建了一个重定向拦截器
	
	excute()方法:
	在一个同步代码块，判断是否被执行过，没执行过才执行
	client.dispatcher().excute(this)//这一步将网络请求放到请求队列中
	getResponseWithInterceptorChain()通过拦截器链获取到Response
	client.dispatcher（）.finish（） 从请求队列中移除同步请求
	
	enqueue()方法：
	client.dispatcher().enqueue(new AsyncCall(responseCallback))//AsyncCall其实是个		runnable，这里如果运行的请求小于最大并发数目那么就把这个请求放到正在运行中的队列，并用Dispather中的 	线程池直接执行这个请求，否则就放到准备好的的队列readyAsyncCalls中
	
	AsyncCall（RealCall子类）源码：
	getResponseWithInterceptorChain（）获取到Response，
	判断一下网络请求是否取消了，取消了就直接使用调用回调的onFailure
	否则就调用回调的onResponse（）方法
	如果catche到了IO错误也回调onFailure（）方法
	最后在finally中从队列中移除掉请求完成的队列，并将等待队列中的请求放到正在请求的队列中，并执行这个请求


Disaptcher源码（执行任务调度的关键类）：
	生产者，消费者模型
	生产者 三个队列 syncRunningQueue AsyncRunningQueue AsyncReadyQUeue
	消费者： 线程池 ExecuteService

OkHttp拦截器：
	拦截器是OkHttp提供的一种强大机制，他可以实现网络监听，请求以及响应重写，请求失败重试等功能
	比较重要的几个拦截器：RetryAndFollowUpInterceptor,BridgeInterceptor,
	CacheInterceptor,ConnectInterceptor,CallServerInterceptor
	在getResponseWithInterceptor（）方法里先
	构造了一个拦截器链条，然后在调用chain.proceed（），拦截器对请求进行处理，并交给下一个拦截器
	然后让前面的拦截器处理后一个拦截器处理后返回的内容这样就形成了一个链条

RetryAndFollowUpInterceptor（重定向和重试）：
	创建StreamAllocation对象
BridgeInterceptor：
	添加各种请求头content-Type content-length，还有Connection 默认keep-alive
	Gzip压缩的处理等

--------------------------
OkHttp的缓存策略：
	缓存的使用：在创建client的时候传入一个Cache对象就可以了builder。cache（new Cache（“文件地		址”））
	put：
	这里注意缓存默认只缓存GET请求
	Cache实际上使用的是DisLruCache来实现对缓存的处理
	Cache内部类Entry是请求信息的封装，包含了请求的各种信息
	将response Url的Md5值作为键，entry作为值写入磁盘缓存

	get（Request request）获取缓存：

CacheInterceptor：
	CacheStategy网络缓存策略

-----------------------------------------
连接池：

ConnectInterceptor：
	HttpCodec httpCodec=streamAllocation.newStream()//这个对象是用于处理请求和响应
	RealConnection conn=streaAllocation.connection（）//进行实际网络传输的方法
	最后把这两个对象传递给后面的拦截器

	弄一个RealConnection
	选择不同的连接  高级：隧道连接，socket连接（了解即可）
	调用CallServerInterceptor

多路复用&keep-Alive机制都需要用到连接池ConnectionPool
ConnectionPool：
	get put管理连接，
	get 遍历连接，跟地址和路由匹配，匹配上了就返回
	put 清理连接，加入新的连接
	
	使用了GC回收算法
	
	
	

	
-----------------
CallServerInterceptor：
	真正的发起网络请求
	主要功能是把网络请求写入IO流中，并从IO流中获取响应

	HttpCodec：编码请求解码响应的一个类
	StreamAllocation：分配Stream，分配管理IO流
	RealConnection 网络链接
	第一步：httpcodec向socket写入Header信息
	第二步：httpcodec向socket写入body信息
	第三步：httpcodec.finishRequest（）表示网络请求写入完成
	第四步：httpcodec.readResponseHeader()读取响应的头信息
	第五步：httpcodec.openResponseBody()读取响应的体信息

面试要逻辑清晰，主要脉络不能乱

----------------------------------------
OkHttp网络请求的大致过程
1.Call对象的封装
2.DisPatcher对请求的分发
3.getResponseWIthInterceptors（）方法获取响应


------------------------------------------------------------------
面试怎么说:
	        //第一步,穿件OkHttpClient客户端,里面初始化了Disaptcher调度器,ConnectionPool等一些公用的的对象
        OkHttpClient client = new OkHttpClient.Builder()
                .connectTimeout(100, TimeUnit.MILLISECONDS)
                .addInterceptor()//addInterceptor() 添加应用拦截器,主要用于数据的处理
                .cache()//设置缓存
                .addNetworkInterceptor()//添加网络拦截器,可以操作中间过程的响应,如重定向和重试
                .build();
        //第二步 创建单个网络请求对象,包含请求头请求体等信息
        Request request=new Request.Builder()
                .addHeader()
                .header()
                .build();
        //第三步 将client和网络请求封装成一个真正用于执行的call对象,他的实现类是realCall
        Call call = client.newCall(request);
        //第四部 执行同步&异步请求 这里面主要是获取到client里面的Dispatcher对象,把网络请求放到请求队列中,
	然后调用getResponseWithInterceptorChain()方法去执行网络请求获取Response,getResponseWithInterceptorChain()里面王拦截器集合中添加了5个比较重要
	的拦截器分别是retryAndFollowUpInterceptor,BridgeInterceptor(添加一些必要的请求头,相应头信息) CacheInterceptor ConnectInterceptor
	CallServerInterceptor,这里把所有的拦截器生成一个拦截器链(责任链模式),去处理原始的请求
	在链接拦截器里面:
		HttpCodec httpCodec = streamAllocation.newStream(client, chain, doExtensiveHealthChecks);
   		 RealConnection connection = streamAllocation.connection();
	创建对应的连接对象和流对象
        call.execute();
        call.enqueue();

	 






	
	
	













