-----------TCP 三次握手--------------------
第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；
第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；
第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。


客户端:喂,听得到我说话吗?
服务器端:听得到,你听的到我说话吗?
客户端:听得到,我们开始讲吧


----------TCP四次挥手-----------------
第一次挥手：客户端发送报文告诉服务器没有数据要发送了
第二次挥手：服务端收到，再发送给客户端告诉它我收到了
第三次挥手：服务端向客户端发送报文，请求关闭连接
第四次挥手：客户端收到关闭连接的请求，向服务端发送报文，服务端关闭连接


客户端:我讲完了
服务器端:我知道你讲完了
服务器端:那我挂了啊
客户端:好,那我也挂了啊..服务器端也挂了电话

-----------Http和Https------------------------------------------------------------------------
Http协议：简单的对象访问协议，对应于应用层。Http协议是基于TCP链接的。
Http连接:http连接就是所谓的短连接，及客户端向服务器发送一次请求，服务器端相应后连接即会断掉

Https:是以安全为目标的HTTP通道，简单讲是HTTP的安全版,
HTTP是应用层协议，位于HTTP协议之下是传输协议TCP。TCP负责传输，
HTTP则定义了数据如何进行包装，在HTTP跟TCP中间加多了一层加密层TLS/SSL，SSL是个加密套件，负责对HTTP的数据进行加密

Https的握手过程:
HTTPS加密请求（一次握手）过程

1.首先，客户端发起握手请求，以明文传输请求信息，包含版本信息，加密-套件候选列表，压缩算法候选列表，随机数，扩展字段等信息(这个没什么好说的，就是用户在浏览器里输入一个HTTPS网址，然后连接到服务端的443端口。)
2.服务端的配置，采用HTTPS协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面。这套证书其实就是一对公钥和私钥。如果对公钥不太理解，可以想象成一把钥匙和一个锁头，只是世界上只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。
服务端返回协商的信息结果，包括选择使用的协议版本 version，选择的加密套件 cipher suite，选择的压缩算法 compression method、随机数 random_S 以及证书。(这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。)
3.客户端验证证书的合法性，包括可信性，是否吊销，过期时间和域名。(这部分工作是由客户端的SSL/TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警示框，提示证书存在的问题。如果证书没有问题，那么就生成一个随机值。然后用证书（也就是公钥）对这个随机值进行加密。就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。)
客户端使用公匙对对称密匙加密，发送给服务端。(这部分传送的是用证书加密后的随机值，目的是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。)
4.服务器用私钥解密，拿到对称加密的密匙。(服务端用私钥解密后，得到了客户端传过来的随机值，然后把内容通过该随机值进行对称加密，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。)
传输加密后的信息，这部分信息就是服务端用私钥加密后的信息，可以在客户端用随机值解密还原。
5.客户端解密信息，客户端用之前生产的私钥解密服务端传过来的信息，于是获取了解密后的内容。整个过程第三方即使监听到了数据，也束手无策。

总结:Https 第一步:客户端发送自身支持的的加密算法和压缩算法等给给服务器端
	第二步:服务器返回协商的结果,其中最最重要的是一个证书(其实就是非对称加密里面的公钥)
	第三步:客户端验证证书的合法性和有效性,并生成一个堆成加密的密钥,通过非对称加密的公钥返回给服务器
	第四部:服务器端用私钥解密出对称加密的密钥,用对称加密的密钥加密信息后返回给
	第五步:客户端用对称加密的密钥解密信息

Https客户端可以不需要做任何配置,理想情况下也是安全的.但是一旦申请到Ca证书的某个公司是坏人或者被黑客入侵,获取了私钥,就会发生中间人攻击,所以做好的方法还是把公钥证书打包进apk里,来保证下发的证书与打入apk包中的证书的一致性从而避免中间人攻击`

----------------------------------------------------------------------------





